{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bert Jim Chang, ID: 2205274"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Out of 2 balanced 1x1 binary matrices, 1 have determinant zero.\n",
      "Out of 6 balanced 2x2 binary matrices, 4 have determinant zero.\n",
      "Out of 252 balanced 3x3 binary matrices, 144 have determinant zero.\n",
      "Out of 12870 balanced 4x4 binary matrices, 7542 have determinant zero.\n",
      "Out of 10400600 balanced 5x5 binary matrices, 5969600 have determinant zero.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import itertools\n",
    "\n",
    "def count_singular_balanced_binary_matrices(n):\n",
    "    total_matrices = 0\n",
    "    singular_count = 0\n",
    "    \n",
    "    #even case\n",
    "    if n % 2 == 0:\n",
    "        num_ones_options = [n * n // 2] \n",
    "    #odd case (can have either floor of n^2 / 2 1s or one more than that)\n",
    "    else:\n",
    "        num_ones_options = [n * n // 2, n * n // 2 + 1]  \n",
    "    \n",
    "    #generate matrices\n",
    "    for num_ones in num_ones_options:\n",
    "        for entries in itertools.combinations(range(n*n), num_ones):\n",
    "            matrix = np.zeros(n*n, dtype=int)\n",
    "            matrix[list(entries)] = 1\n",
    "            matrix = matrix.reshape((n, n))\n",
    "            \n",
    "            total_matrices += 1\n",
    "            \n",
    "            #check if det zero\n",
    "            if np.linalg.det(matrix) == 0:\n",
    "                singular_count += 1\n",
    "    \n",
    "    return singular_count, total_matrices\n",
    "\n",
    "#print results\n",
    "for n in range(1,6,1):\n",
    "    singular_count, total_matrices = count_singular_balanced_binary_matrices(n)\n",
    "    print(f\"Out of {total_matrices} balanced {n}x{n} binary matrices, {singular_count} have determinant zero.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
